# Generated by CodiumAI

import pytest
from datetime import datetime
from epilepsiae_sql_dataloader.models.Sample import Sample
from epilepsiae_sql_dataloader.models.LoaderTables import Patient, Dataset
from tests.utils import db_session


class TestSample:
    def create_patient_if_not_exists(self, _db_session):
        patient = _db_session.query(Patient).filter_by(id=1).first()
        if patient is None:
            patient = Patient(id=1, info="Patient 1")
            _db_session.add(patient)
            _db_session.commit()
        return patient

    @staticmethod
    def create_sample_helper(
        _db_session,
        start_ts,
        num_samples=100,
        sample_freq=1000,
        conversion_factor=1.0,
        num_channels=1,
        elec_names="test_elec",
        pat_id=1,
        adm_id=1,
        rec_id=1,
        duration_in_sec=10,
        sample_bytes=1000,
        data_file="test_file",
    ):
        # Create the sample object with the provided arguments
        sample = Sample(
            start_ts=start_ts,
            num_samples=num_samples,
            sample_freq=sample_freq,
            conversion_factor=conversion_factor,
            num_channels=num_channels,
            elec_names=elec_names,
            pat_id=pat_id,
            adm_id=adm_id,
            rec_id=rec_id,
            duration_in_sec=duration_in_sec,
            sample_bytes=sample_bytes,
            data_file=data_file,
        )
        # Add and commit the sample to the database
        _db_session.add(sample)
        _db_session.commit()
        # Query the sample and return the instance
        sample = _db_session.query(Sample).filter(Sample.id == sample.id).first()
        return sample

    # Tests that a Sample object can be created with all required parameters
    def test_create_sample_object(self, db_session):
        # Create a patient first since this references it:
        dataset = Dataset(name="inv")
        patient = Patient(id=1)
        dataset.patients.append(patient)

        sample = Sample(
            start_ts=datetime.now(),
            num_samples=100,
            sample_freq=1000,
            conversion_factor=1.0,
            num_channels=1,
            elec_names="test_elec",
            adm_id=1,
            rec_id=1,
            duration_in_sec=10,
            sample_bytes=1000,
            data_file="test_file",
        )

        patient.samples.append(sample)  # This adds sample to patient.samples directly

        assert isinstance(sample, Sample)
        db_session.add(sample)
        db_session.commit()
        # Query the sample and return the instance
        sample2 = db_session.query(Sample).filter(Sample.id == sample.id).first()
        assert sample2.start_ts == sample.start_ts

    # Tests that the attributes of a Sample object can be accessed
    def test_access_sample_attributes(self):
        dataset = Dataset(name="inv")
        patient = Patient(id=1)
        dataset.patients.append(patient)
        sample = Sample(
            start_ts=datetime.now(),
            num_samples=100,
            sample_freq=1000,
            conversion_factor=1.0,
            num_channels=1,
            elec_names="test_elec",
            pat_id=1,
            adm_id=1,
            rec_id=1,
            duration_in_sec=10,
            sample_bytes=1000,
            data_file="test_file",
        )
        patient.samples.append(sample)
        assert sample.start_ts
        assert sample.num_samples
        assert sample.sample_freq
        assert sample.conversion_factor
        assert sample.num_channels
        assert sample.elec_names
        assert sample.pat_id
        assert sample.adm_id
        assert sample.rec_id
        assert sample.duration_in_sec
        assert sample.sample_bytes
        assert sample.data_file

    # Tests that creating a new Sample object with an invalid start_ts raises an error
    def test_invalid_start_ts(self, db_session):
        with pytest.raises(TypeError):
            dataset = Dataset(name="inv")
            patient = Patient(id=1)
            dataset.patients.append(patient)
            self.create_sample_helper(
                db_session,
                start_ts="invalid",
            )

    # Tests that creating a new Sample object with an invalid num_samples raises an error
    def test_invalid_num_samples(self, db_session):
        with pytest.raises(TypeError):
            dataset = Dataset(name="inv")
            patient = Patient(id=1)
            dataset.patients.append(patient)
            self.create_sample_helper(
                db_session,
                start_ts="invalid",
            )

    # Tests that creating a new Sample object with no elec_names raises an error
    def test_no_elec_names(self, db_session):
        with pytest.raises(TypeError):
            dataset = Dataset(name="inv")
            patient = Patient(id=1)
            dataset.patients.append(patient)
            self.create_sample_helper(
                db_session, start_ts=datetime.now(), elec_names=None
            )

    # Tests that creating a new Sample object with no data_file raises an error
    def test_no_data_file(self, db_session):
        with pytest.raises(TypeError):
            dataset = Dataset(name="inv")
            patient = Patient(id=1)
            dataset.patients.append(patient)
            self.create_sample_helper(
                db_session, start_ts=datetime.now(), data_file=None
            )
