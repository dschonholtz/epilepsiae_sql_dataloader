# Generated by CodiumAI

import pytest
from epilepsiae_sql_dataloader.models.LoaderTables import DataChunk, Patient, Dataset, SeizureState
from sqlalchemy.exc import DataError, IntegrityError

"""
Code Analysis

Main functionalities:
The Patient class represents a patient in the database and is linked to the 'patients' table. It has a primary key 'id' and a field 'info' containing patient information. The class also has relationships with the DataChunk class, allowing access to the data chunks associated with a patient. The main functionalities of the Patient class are:
- Store patient information in the database
- Link patient to data chunks in the database
- Retrieve data chunks associated with a patient

Methods:
The Patient class does not have any methods defined.

Fields:
- id: An integer that serves as the primary key.
- info: A string containing patient information.
- chunks: A relationship that links to the DataChunk instances associated with a patient.
- samples: A relationship that links to the DataChunk instances associated with a patient. (Note: This field is not used in the class and may be a mistake.)
- seizures: A relationship that links to the DataChunk instances associated with a patient. (Note: This field is not used in the class and may be a mistake.)
"""
import pytest
from sqlalchemy import create_engine
from sqlalchemy.orm import sessionmaker
from epilepsiae_sql_dataloader.models.LoaderTables import Base


@pytest.fixture(scope='function')
def db_session():
    postgres_ip = '172.17.0.2'
    username = 'postgres'
    password = 'postgres'
    # test with a postgres db as we are using some db types that are specific to postgres
    # you need to have postgres running locally with a test_db configured and the user/pass set up as postgres/postgres
    engine = create_engine(f'postgresql://{username}:{password}@{postgres_ip}/seizure_db_test')
    Base.metadata.create_all(engine)  # creates the tables

    Session = sessionmaker(bind=engine)
    session = Session()
    yield session  # this is where the testing happens

    # after the test function has completed, we rollback any changes to the DB and close the connection
    session.rollback()
    session.close()
    Base.metadata.drop_all(engine)  # deletes the tables


# Now use the db_session in your test functions like this:
class TestPatient:
    # Generated by CodiumAI

    """
    Code Analysis

    Main functionalities:
    The Patient class represents a patient in the database and is linked to the 'patients' table. It has a primary key 'id' and a string field 'info' containing patient information. The class has relationships with the DataChunk class, allowing access to the data chunks associated with a patient. The class also has relationships with the samples and seizures fields, which are not described in the context provided.

    Methods:
    The Patient class does not have any methods explicitly defined in the context provided.

    Fields:
    - id: An integer that serves as the primary key.
    - info: A string containing patient information.
    - chunks: A relationship that links to the DataChunk instances associated with a patient.
    - samples: A relationship that links to the DataChunk instances associated with a patient. (not described in context)
    - seizures: A relationship that links to the DataChunk instances associated with a patient. (not described in context)
    """
    @staticmethod
    def create_patient_helper(patient_id, info, _db_session):
        patient = Patient(id=patient_id, info=info)
        _db_session.add(patient)
        _db_session.commit()
        # Query the patient and return the instance
        patient = _db_session.query(Patient).filter(Patient.id == patient_id).first()
        return patient

    @staticmethod
    def create_dataset_helper(dataset_id, name, _db_session):
        dataset = Dataset(id=dataset_id, name=name)
        _db_session.add(dataset)
        _db_session.commit()
        return dataset

    @staticmethod
    def create_seizure_state_helper(state_id, state, _db_session):
        seizure_state = SeizureState(id=state_id, state=state)
        _db_session.add(seizure_state)
        _db_session.commit()
        return seizure_state

    @staticmethod
    def create_data_chunk_helper(patient, dataset_id, state_id, data, _db_session):
        data_chunk = DataChunk(patient_id=patient.id, dataset_id=dataset_id, state_id=state_id, data=data)
        _db_session.add(data_chunk)
        _db_session.commit()
        return data_chunk

    def test_create_patient_valid_id(self):
        patient = Patient(id=1)
        assert patient.id is not None

    #  Tests that a new Patient instance cannot be created with a non-integer id
    def test_create_patient_non_integer_id(self, db_session):
        with pytest.raises(DataError):
            patient = Patient(id='not_an_integer', info='Patient 1')
            db_session.add(patient)
            db_session.commit()

    #  Tests that a new Patient instance cannot be created with an id that already exists in the database
    def test_create_patient_duplicate_id(self, db_session):
        self.create_patient_helper(patient_id=1, info='something', _db_session=db_session)
        with pytest.raises(IntegrityError):
            self.create_patient_helper(patient_id=1, info='something', _db_session=db_session)

    #  Tests that a new Patient instance can be created with an empty info attribute
    def test_create_patient_empty_info(self, db_session):
        patient = self.create_patient_helper(patient_id=1, info='', _db_session=db_session)
        assert patient.info == ''

    #  Tests that a Patient instance and its associated DataChunk instances can be deleted
    def test_delete_patient_and_data_chunks(self, db_session):
        patient = self.create_patient_helper(patient_id=1, info='something', _db_session=db_session)
        dataset = self.create_dataset_helper(dataset_id=1, name='dataset_name', _db_session=db_session)
        seizure_state = self.create_seizure_state_helper(state_id=1, state='state_name', _db_session=db_session)
        self.create_data_chunk_helper(
            patient=patient, dataset_id=dataset.id, state_id=seizure_state.id, data=b'some data', _db_session=db_session)
        assert len(patient.chunks) == 1
        db_session.delete(patient)
        db_session.commit()
        assert len(db_session.query(Patient).all()) == 0
        assert len(db_session.query(DataChunk).all()) == 0

