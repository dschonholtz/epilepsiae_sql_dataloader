# Generated by CodiumAI

import pytest
from epilepsiae_sql_dataloader.models.LoaderTables import (
    DataChunk,
    Patient,
    Dataset,
)
from epilepsiae_sql_dataloader.models.Sample import Sample
from sqlalchemy.exc import DataError, IntegrityError

"""
Code Analysis

Main functionalities:
The Patient class represents a patient in the database and is linked to the 'patients' table. It has a primary key 'id' and a field 'info' containing patient information. The class also has relationships with the DataChunk class, allowing access to the data chunks associated with a patient. The main functionalities of the Patient class are:
- Store patient information in the database
- Link patient to data chunks in the database
- Retrieve data chunks associated with a patient

Methods:
The Patient class does not have any methods defined.

Fields:
- id: An integer that serves as the primary key.
- info: A string containing patient information.
- chunks: A relationship that links to the DataChunk instances associated with a patient.
- samples: A relationship that links to the DataChunk instances associated with a patient. (Note: This field is not used in the class and may be a mistake.)
- seizures: A relationship that links to the DataChunk instances associated with a patient. (Note: This field is not used in the class and may be a mistake.)
"""
import pytest
from tests.utils import db_session


# Now use the db_session in your test functions like this:
class TestPatient:
    # Generated by CodiumAI

    """
    Code Analysis

    Main functionalities:
    The Patient class represents a patient in the database and is linked to the 'patients' table. It has a primary key 'id' and a string field 'info' containing patient information. The class has relationships with the DataChunk class, allowing access to the data chunks associated with a patient. The class also has relationships with the samples and seizures fields, which are not described in the context provided.

    Methods:
    The Patient class does not have any methods explicitly defined in the context provided.

    Fields:
    - id: An integer that serves as the primary key.
    - info: A string containing patient information.
    - chunks: A relationship that links to the DataChunk instances associated with a patient.
    - samples: A relationship that links to the DataChunk instances associated with a patient. (not described in context)
    - seizures: A relationship that links to the DataChunk instances associated with a patient. (not described in context)
    """

    @staticmethod
    def create_patient_helper(patient_id, _db_session):
        patient = Patient(id=patient_id)
        _db_session.add(patient)
        _db_session.commit()
        # Query the patient and return the instance
        patient = _db_session.query(Patient).filter(Patient.id == patient_id).first()
        return patient

    @staticmethod
    def create_dataset_helper(dataset_id, name, _db_session):
        dataset = Dataset(id=dataset_id, name=name)
        _db_session.add(dataset)
        _db_session.commit()
        return dataset

    @staticmethod
    def create_data_chunk_helper(patient, seizure_state, data, _db_session):
        data_chunk = DataChunk(
            patient_id=patient.id, seizure_state=seizure_state, data=data
        )
        _db_session.add(data_chunk)
        _db_session.commit()
        return data_chunk

    def test_create_patient_valid_id(self):
        patient = Patient(id=1)
        assert patient.id == 1

    #  Tests that a new Patient instance cannot be created with a non-integer id
    def test_create_patient_non_integer_id(self, db_session):
        with pytest.raises(DataError):
            patient = Patient(id="not_an_integer")
            db_session.add(patient)
            db_session.commit()

    #  Tests that a new Patient instance cannot be created with an id that already exists in the database
    def test_create_patient_duplicate_id(self, db_session):
        self.create_patient_helper(patient_id=1, _db_session=db_session)
        with pytest.raises(IntegrityError):
            self.create_patient_helper(patient_id=1, _db_session=db_session)

    #  Tests that a Patient instance and its associated DataChunk instances can be deleted
    def test_delete_patient_and_data_chunks(self, db_session):
        patient = self.create_patient_helper(patient_id=1, _db_session=db_session)
        dataset = self.create_dataset_helper(
            dataset_id=1, name="dataset_name", _db_session=db_session
        )
        self.create_data_chunk_helper(
            patient=patient,
            seizure_state=0,
            data=b"some data",
            _db_session=db_session,
        )
        assert len(patient.chunks) == 1
        db_session.delete(patient)
        db_session.commit()
        assert len(db_session.query(Patient).all()) == 0
        assert len(db_session.query(DataChunk).all()) == 0
